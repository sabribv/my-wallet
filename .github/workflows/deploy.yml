name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main # Cambia 'main' por el nombre de tu rama principal si es necesario
  workflow_dispatch:

permissions:
  contents: write  # Da permisos para realizar un push

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configurar Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Cambia la versión según lo que use tu app
          cache: 'npm'

      # 3. Instalar dependencias
      - name: Install dependencies
        run: npm install

      # 4. Crear archivo de configuración dinámico (firebase-config.ts)
      - name: Generate firebase-config.ts
        run: |
          echo "export const firebaseConfig = {
            apiKey: '${{ secrets.FIREBASE_API_KEY }}',
            authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
            projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
            storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
            messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
            appId: '${{ secrets.FIREBASE_APP_ID }}',
            measurementId: '${{ secrets.FIREBASE_MEASUREMENT_ID }}',
            vapidKey: '${{ secrets.FIREBASE_VAPID_KEY}}',
          };" > src/app/firebase-config.ts

      # 6. Construir el proyecto
      - name: Build project
        run: npm run build:github

      # 7. Mover el archivo firebase-messaging-sw.js al directorio de build
      - name: Move firebase-messaging-sw.js to dist
        run: |
          cp src/firebase-messaging-sw.js dist/my-wallet/browser/firebase-messaging-sw.js

      # 8. Guardar los archivos del build en una carpeta temporal
      - name: Save build artifacts
        run: mv dist/my-wallet/browser ../build-output

      # 9. Configurar git para hacer el push manualmente
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # 10. Crear y cambiar a la rama gh-pages
      - name: Switch to gh-pages branch
        run: |
          git checkout --orphan gh-pages
          git reset --hard
          git clean -fdx

      # 11. Mover los archivos del build de vuelta al directorio actual
      - name: Restore build artifacts
        run: mv ../build-output/* .

      # 12. Crear el archivo .nojekyll
      - name: Create .nojekyll file
        run: touch .nojekyll

      # 13. Commit y push de los archivos
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add .
          git commit -m "Deploy to GitHub Pages"
          git push -f origin gh-pages
